simulation 
import ArrayUtil;
import ArrayUtil;
import BooleanLogic;
import BooleanLogic;
import BooleanLogic;
import DataWriter;
import DataWriter;
import DebugLogging;
import FMI2;
import FMI2;
import FMI2;
import Initializer;
import JacobianStepBuilder;
import Logger;
import Logger;
import Logger;
import MEnv;
import MEnv;
import Math;
import Math;
import Math;
import TypeConverter;
import TypeConverter;
import TypeConverter;
@Framework( "FMI2");
@FrameworkConfig( "FMI2", "{\"fmus\":{\"{msd1}\":\"file:///home/cosim/MassSpringDamper1.fmu\",\"{msd2}\":\"file:///home/cosim/MassSpringDamper2.fmu\"},\"connections\":{\"{msd1}.msd1i.x1\":[\"{msd2}.msd2i.x1\"],\"{msd1}.msd1i.v1\":[\"{msd2}.msd2i.v1\"],\"{msd2}.msd2i.fk\":[\"{msd1}.msd1i.fk\"]},\"logVariables\":{\"{msd2}.msd2i\":[\"x2\",\"v2\"]}}");
{
 	bool global_execution_continue = true;
	int FMI_STATUS_OK = 0;
	int FMI_STATUS_WARNING = 1;
	int FMI_STATUS_DISCARD = 2;
	int FMI_STATUS_ERROR = 3;
	int FMI_STATUS_FATAL = 4;
	int FMI_STATUS_PENDING = 5;
	int status = 0;
	Math math = null;
	Logger logger = null;
	DataWriter dataWriter = null;
	BooleanLogic booleanLogic = null;
	@mapFmu(msd1 -> "{msd1}");
	FMI2 msd1 = null;
	@mapFmu(msd2 -> "{msd2}");
	FMI2 msd2 = null;
	@mapInstance(msd2i -> "msd2i");
	FMI2Component msd2i = null;
	@mapInstance(msd1i -> "msd1i");
	FMI2Component msd1i = null;
	try 
	{
		math = load("Math");
		if( (math == null) )
		{
				error "math IS NULL ";
		}
		logger = load("Logger");
		if( (logger == null) )
		{
				error "logger IS NULL ";
		}
		dataWriter = load("DataWriter");
		if( (dataWriter == null) )
		{
				error "dataWriter IS NULL ";
		}
		booleanLogic = load("BooleanLogic");
		if( (booleanLogic == null) )
		{
				error "booleanLogic IS NULL ";
		}
		msd1 = load("FMI2", "{da03fa66-a02a-43d6-a906-db865e2ea044}", "file:/home/cosim/MassSpringDamper1.fmu");
		if( (msd1 == null) )
		{
				error "msd1 IS NULL ";
		}
		msd2 = load("FMI2", "{9113a387-2c02-42ae-ae68-5073bf845034}", "file:/home/cosim/MassSpringDamper2.fmu");
		if( (msd2 == null) )
		{
				error "msd2 IS NULL ";
		}
		msd2i = msd2.instantiate("msd2i", false, false);
		if( (msd2i == null) )
		{
				error "msd2i IS NULL ";
		}
		msd1i = msd1.instantiate("msd1i", false, false);
		if( (msd1i == null) )
		{
				error "msd1i IS NULL ";
		}
		FMI2Component components[2] = { msd2i , msd1i };
		real STEP_SIZE = 0.001;
		real START_TIME = 0.0;
		real END_TIME = 10.0;
		int FMI_OK = 0;
		int FMI_WARNING = 1;
		int FMI_DISCARD = 2;
		int FMI_ERROR = 3;
		int FMI_FATAL = 4;
		int FMI_PENDING = 5;
		BooleanLogic booleanLogic1;
		try 
		{
			booleanLogic1 = load("BooleanLogic");
			if( booleanLogic1 == null )
			{
					error "Failed load of: booleanLogic1";
			}
			real msd2iRealShare[1];
			real msd1iRealShare[2];
			real msd1iRealIo[9];
			uint msd1iUintVref[9];
			real msd2iRealIo[13];
			uint msd2iUintVref[13];
			real fixed_end_time = 0.0;
			fixed_end_time = END_TIME;
			real absoluteTolerance = 0.2;
			real relativeTolerance = 0.1;
			int maxConvergeAttempts = 5;
			status = msd2i.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setupExperiment' on 'msd2i'";
			}
			status = msd1i.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setupExperiment' on 'msd1i'";
			}
			msd2iUintVref[0] = 0;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 1;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 2;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 3;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 4;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 6;
			msd2iRealIo[0] = 0.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 5;
			msd2iRealIo[0] = 0.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd1iUintVref[0] = 0;
			msd1iRealIo[0] = 1.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			msd1iUintVref[0] = 1;
			msd1iRealIo[0] = 1.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			msd1iUintVref[0] = 2;
			msd1iRealIo[0] = 1.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			msd1iUintVref[0] = 4;
			msd1iRealIo[0] = 1.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			msd1iUintVref[0] = 3;
			msd1iRealIo[0] = 0.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			status = msd2i.enterInitializationMode();
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'enterInitializationMode' on 'msd2i'";
			}
			status = msd1i.enterInitializationMode();
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'enterInitializationMode' on 'msd1i'";
			}
			msd1iUintVref[0] = 7;
			status = msd1i.getReal(msd1iUintVref, 1, msd1iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'getReal' on 'msd1i'";
			}
			msd1iRealShare[0] = msd1iRealIo[0];
			msd2iUintVref[0] = 8;
			msd2iRealIo[0] = msd1iRealShare[0];
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd1iUintVref[0] = 6;
			status = msd1i.getReal(msd1iUintVref, 1, msd1iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'getReal' on 'msd1i'";
			}
			msd1iRealShare[1] = msd1iRealIo[0];
			msd2iUintVref[0] = 9;
			msd2iRealIo[0] = msd1iRealShare[1];
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 7;
			status = msd2i.getReal(msd2iUintVref, 1, msd2iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'getReal' on 'msd2i'";
			}
			msd2iRealShare[0] = msd2iRealIo[0];
			msd1iUintVref[0] = 5;
			msd1iRealIo[0] = msd2iRealShare[0];
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			status = msd2i.exitInitializationMode();
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'exitInitializationMode' on 'msd2i'";
			}
			status = msd1i.exitInitializationMode();
			if( (status == FMI_ERROR) || (status == FMI_FATAL) )
			{
					if( status == FMI_ERROR )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( status == FMI_FATAL )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'exitInitializationMode' on 'msd1i'";
			}
		}		finally 
		{
			if( booleanLogic1 != null )
			{
					unload(booleanLogic1);
					booleanLogic1 = null;
			}
		}
		@Config("{\"variablesOfInterest\":[],\"stabilisation\":false,\"absoluteTolerance\":0.0,\"relativeTolerance\":0.0,\"stabilisationLoopMaxIterations\":0,\"simulationProgramDelay\":false,\"setGetDerivatives\":false,\"startTime\":0.0,\"endTime\":10.0,\"stepAlgorithm\":{\"type\":\"fixed-step\",\"size\":0.001}}");
		JacobianStepBuilder.expand fixedStepSize(components, STEP_SIZE, START_TIME, END_TIME);
		msd2i.terminate();
		msd1i.terminate();
	}	finally 
	{
		if( (msd2i != null) )
		{
				msd2.freeInstance(msd2i);
				msd2i = null;
		}
		if( (msd1i != null) )
		{
				msd1.freeInstance(msd1i);
				msd1i = null;
		}
		if( (msd1 != null) )
		{
				unload(msd1);
				msd1 = null;
		}
		if( (msd2 != null) )
		{
				unload(msd2);
				msd2 = null;
		}
		if( (math != null) )
		{
				unload(math);
				math = null;
		}
		if( (logger != null) )
		{
				unload(logger);
				logger = null;
		}
		if( (dataWriter != null) )
		{
				unload(dataWriter);
				dataWriter = null;
		}
		if( (booleanLogic != null) )
		{
				unload(booleanLogic);
				booleanLogic = null;
		}
	}
}