simulation 
import BooleanLogic;
import DataWriter;
import DataWriterConfig;
import FMI2;
import FMI2Component;
import FmiComponentState;
import Logger;
import Math;
{
 	int status = 0;
	Math math = null;
	Logger logger = null;
	DataWriter dataWriter = null;
	BooleanLogic booleanLogic = null;
	@mapFmu(msd1 -> "{msd1}");
	FMI2 msd1 = null;
	@mapFmu(msd2 -> "{msd2}");
	FMI2 msd2 = null;
	@mapInstance(msd2i -> "msd2i");
	FMI2Component msd2i = null;
	@mapInstance(msd1i -> "msd1i");
	FMI2Component msd1i = null;
	try 
	{
		math = load("Math");
		if( ((math == null)) )
		{
				error "math IS NULL ";
		}
		logger = load("Logger");
		if( ((logger == null)) )
		{
				error "logger IS NULL ";
		}
		dataWriter = load("DataWriter");
		if( ((dataWriter == null)) )
		{
				error "dataWriter IS NULL ";
		}
		booleanLogic = load("BooleanLogic");
		if( ((booleanLogic == null)) )
		{
				error "booleanLogic IS NULL ";
		}
		msd1 = load("FMI2", "{da03fa66-a02a-43d6-a906-db865e2ea044}", "file:/home/cosim/MassSpringDamper1.fmu");
		if( ((msd1 == null)) )
		{
				error "msd1 IS NULL ";
		}
		msd2 = load("FMI2", "{9113a387-2c02-42ae-ae68-5073bf845034}", "file:/home/cosim/MassSpringDamper2.fmu");
		if( ((msd2 == null)) )
		{
				error "msd2 IS NULL ";
		}
		msd2i = msd2.instantiate("msd2i", false, false);
		if( ((msd2i == null)) )
		{
				error "msd2i IS NULL ";
		}
		msd1i = msd1.instantiate("msd1i", false, false);
		if( ((msd1i == null)) )
		{
				error "msd1i IS NULL ";
		}
		real STEP_SIZE = 0.001;
		real START_TIME = 0.0;
		real END_TIME = 10.0;
		int FMI_OK = 0;
		int FMI_DISCARD = 2;
		int FMI_ERROR = 3;
		int FMI_FATAL = 4;
		BooleanLogic booleanLogic1;
		try 
		{
			booleanLogic1 = load("BooleanLogic");
			if( (booleanLogic1 == null) )
			{
					error "Failed load of: booleanLogic1";
			}
			real msd2iRealShare[1];
			real msd1iRealShare[2];
			real msd1iRealIo[9];
			uint msd1iUintVref[9];
			real msd2iRealIo[13];
			uint msd2iUintVref[13];
			real fixed_end_time = 0.0;
			fixed_end_time = END_TIME;
			status = msd2i.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setupExperiment' on 'msd2i'";
			}
			status = msd1i.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setupExperiment' on 'msd1i'";
			}
			msd2iUintVref[0] = 0;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 1;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 2;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 3;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 4;
			msd2iRealIo[0] = 1.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 6;
			msd2iRealIo[0] = 0.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 5;
			msd2iRealIo[0] = 0.0;
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd1iUintVref[0] = 0;
			msd1iRealIo[0] = 1.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			msd1iUintVref[0] = 1;
			msd1iRealIo[0] = 1.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			msd1iUintVref[0] = 2;
			msd1iRealIo[0] = 1.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			msd1iUintVref[0] = 4;
			msd1iRealIo[0] = 1.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			msd1iUintVref[0] = 3;
			msd1iRealIo[0] = 0.0;
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			status = msd2i.enterInitializationMode();
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'enterInitializationMode' on 'msd2i'";
			}
			status = msd1i.enterInitializationMode();
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'enterInitializationMode' on 'msd1i'";
			}
			msd1iUintVref[0] = 7;
			status = msd1i.getReal(msd1iUintVref, 1, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'getReal' on 'msd1i'";
			}
			msd1iRealShare[0] = msd1iRealIo[0];
			msd2iUintVref[0] = 8;
			msd2iRealIo[0] = msd1iRealShare[0];
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd1iUintVref[0] = 6;
			status = msd1i.getReal(msd1iUintVref, 1, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'getReal' on 'msd1i'";
			}
			msd1iRealShare[1] = msd1iRealIo[0];
			msd2iUintVref[0] = 9;
			msd2iRealIo[0] = msd1iRealShare[1];
			status = msd2i.setReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'setReal' on 'msd2i'";
			}
			msd2iUintVref[0] = 7;
			status = msd2i.getReal(msd2iUintVref, 1, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'getReal' on 'msd2i'";
			}
			msd2iRealShare[0] = msd2iRealIo[0];
			msd1iUintVref[0] = 5;
			msd1iRealIo[0] = msd2iRealShare[0];
			status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'setReal' on 'msd1i'";
			}
			status = msd2i.exitInitializationMode();
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'exitInitializationMode' on 'msd2i'";
			}
			status = msd1i.exitInitializationMode();
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'exitInitializationMode' on 'msd1i'";
			}
		}		finally 
		{
			if( (booleanLogic1 != null) )
			{
					unload(booleanLogic1);
					booleanLogic1 = null;
			}
		}
		BooleanLogic booleanLogic2;
		DataWriter dataWriter1;
		try 
		{
			dataWriter1 = load("DataWriter");
			if( (dataWriter1 == null) )
			{
					error "Failed load of: dataWriter1";
			}
			booleanLogic2 = load("BooleanLogic");
			if( (booleanLogic2 == null) )
			{
					error "Failed load of: booleanLogic2";
			}
			bool msd1iCurrentTimeFullStep = true;
			real msd1iCurrentTime = 0.0;
			bool msd2iCurrentTimeFullStep = true;
			real msd2iCurrentTime = 0.0;
			real msd2iRealShare[3];
			real msd1iRealShare[2];
			real msd1iRealIo[9];
			uint msd1iUintVref[9];
			real msd2iRealIo[13];
			uint msd2iUintVref[13];
			real jac_current_step_size = 0.0;
			real jac_step_size = 0.0;
			real jac_current_communication_point = 0.0;
			real jac_end_time = 0.0;
			jac_current_step_size = STEP_SIZE;
			jac_step_size = STEP_SIZE;
			jac_current_communication_point = START_TIME;
			jac_end_time = END_TIME;
			string datawriter_headers[5] = { "{msd2}.msd2i.fk" , "{msd2}.msd2i.v2" , "{msd2}.msd2i.x2" , "{msd1}.msd1i.v1" , "{msd1}.msd1i.x1" };
			DataWriterConfig datawriter_configuration = dataWriter1.writeHeader(datawriter_headers);
			msd2iUintVref[0] = 7;
			msd2iUintVref[1] = 10;
			msd2iUintVref[2] = 11;
			status = msd2i.getReal(msd2iUintVref, 3, msd2iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd2i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd2i);
					}
					error "Failed to 'getReal' on 'msd2i'";
			}
			msd1iUintVref[0] = 6;
			msd1iUintVref[1] = 7;
			status = msd1i.getReal(msd1iUintVref, 2, msd1iRealIo);
			if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
			{
					if( (status == FMI_ERROR) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd1i);
					}
					if( (status == FMI_FATAL) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd1i);
					}
					error "Failed to 'getReal' on 'msd1i'";
			}
			msd1iRealShare[0] = msd1iRealIo[0];
			msd1iRealShare[1] = msd1iRealIo[1];
			msd2iRealShare[0] = msd2iRealIo[0];
			msd2iRealShare[1] = msd2iRealIo[1];
			msd2iRealShare[2] = msd2iRealIo[2];
			real fmu_communicationpoints[2];
			dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, msd2iRealShare[0], msd2iRealShare[1], msd2iRealShare[2], msd1iRealShare[0], msd1iRealShare[1]);
			bool any_discards = false;
			while( ((jac_current_communication_point + jac_current_step_size) < jac_end_time) )
			{
				FmiComponentState msd2iState;
				status = msd2i.getState(ref msd2iState);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "GetState failed on '%s' with status: FMI_ERROR", msd2i);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "GetState failed on '%s' with status: FMI_FATAL", msd2i);
						}
						error "Failed to 'getState' on 'msd2i'";
				}
				FmiComponentState msd1iState;
				status = msd1i.getState(ref msd1iState);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "GetState failed on '%s' with status: FMI_ERROR", msd1i);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "GetState failed on '%s' with status: FMI_FATAL", msd1i);
						}
						error "Failed to 'getState' on 'msd1i'";
				}
				msd2iUintVref[0] = 8;
				msd2iUintVref[1] = 9;
				msd2iRealIo[0] = msd1iRealShare[1];
				msd2iRealIo[1] = msd1iRealShare[0];
				status = msd2i.setReal(msd2iUintVref, 2, msd2iRealIo);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd2i);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd2i);
						}
						error "Failed to 'setReal' on 'msd2i'";
				}
				msd1iUintVref[0] = 5;
				msd1iRealIo[0] = msd2iRealShare[0];
				status = msd1i.setReal(msd1iUintVref, 1, msd1iRealIo);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", msd1i);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", msd1i);
						}
						error "Failed to 'setReal' on 'msd1i'";
				}
				any_discards = false;
				status = msd2i.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", msd2i);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", msd2i);
						}
						error "Failed to 'doStep' on 'msd2i'";
				}
				if( (status != FMI_OK) )
				{
						if( (status == FMI_DISCARD) )
						{
								status = msd2i.getRealStatus(2, ref msd2iCurrentTime);
								msd2iCurrentTimeFullStep = false;
						}
				}
				else
				{
						msd2iCurrentTime = jac_current_communication_point + jac_current_step_size;
						msd2iCurrentTimeFullStep = true;
				}
				fmu_communicationpoints[0] = msd2iCurrentTime;
				if( (!msd2iCurrentTimeFullStep) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "msd2i", jac_current_communication_point, jac_current_step_size, msd2iCurrentTime);
						any_discards = any_discards || !msd2iCurrentTimeFullStep;
				}
				status = msd1i.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", msd1i);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", msd1i);
						}
						error "Failed to 'doStep' on 'msd1i'";
				}
				if( (status != FMI_OK) )
				{
						if( (status == FMI_DISCARD) )
						{
								status = msd1i.getRealStatus(2, ref msd1iCurrentTime);
								msd1iCurrentTimeFullStep = false;
						}
				}
				else
				{
						msd1iCurrentTime = jac_current_communication_point + jac_current_step_size;
						msd1iCurrentTimeFullStep = true;
				}
				fmu_communicationpoints[1] = msd1iCurrentTime;
				if( (!msd1iCurrentTimeFullStep) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "msd1i", jac_current_communication_point, jac_current_step_size, msd1iCurrentTime);
						any_discards = any_discards || !msd1iCurrentTimeFullStep;
				}
				msd1iUintVref[0] = 6;
				msd1iUintVref[1] = 7;
				status = msd1i.getReal(msd1iUintVref, 2, msd1iRealIo);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd1i);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd1i);
						}
						error "Failed to 'getReal' on 'msd1i'";
				}
				msd2iUintVref[0] = 7;
				msd2iUintVref[1] = 10;
				msd2iUintVref[2] = 11;
				status = msd2i.getReal(msd2iUintVref, 3, msd2iRealIo);
				if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
				{
						if( (status == FMI_ERROR) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", msd2i);
						}
						if( (status == FMI_FATAL) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", msd2i);
						}
						error "Failed to 'getReal' on 'msd2i'";
				}
				msd1iRealShare[0] = msd1iRealIo[0];
				msd1iRealShare[1] = msd1iRealIo[1];
				msd2iRealShare[0] = msd2iRealIo[0];
				msd2iRealShare[1] = msd2iRealIo[1];
				msd2iRealShare[2] = msd2iRealIo[2];
				if( (any_discards) )
				{
						status = msd2i.setState(msd2iState);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "SetState failed on '%s' with status: FMI_ERROR", msd2i);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "SetState failed on '%s' with status: FMI_FATAL", msd2i);
								}
								error "Failed to 'setState' on 'msd2i'";
						}
						status = msd1i.setState(msd1iState);
						if( ((status == FMI_ERROR) || (status == FMI_FATAL)) )
						{
								if( (status == FMI_ERROR) )
								{
										logger.log(4, "SetState failed on '%s' with status: FMI_ERROR", msd1i);
								}
								if( (status == FMI_FATAL) )
								{
										logger.log(4, "SetState failed on '%s' with status: FMI_FATAL", msd1i);
								}
								error "Failed to 'setState' on 'msd1i'";
						}
						real minVal = math.minRealFromArray(fmu_communicationpoints);
						jac_current_step_size = minVal - jac_current_communication_point;
						logger.log(1, "## Discard occurred! FMUs are rolled back and step-size reduced to: %f", jac_current_step_size);
				}
				if( (!any_discards) )
				{
						jac_current_communication_point = jac_current_communication_point + jac_current_step_size;
						dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, msd2iRealShare[0], msd2iRealShare[1], msd2iRealShare[2], msd1iRealShare[0], msd1iRealShare[1]);
						jac_current_step_size = jac_step_size;
				}
			}
			dataWriter1.close();
		}		finally 
		{
			if( (dataWriter1 != null) )
			{
					unload(dataWriter1);
					dataWriter1 = null;
			}
			if( (booleanLogic2 != null) )
			{
					unload(booleanLogic2);
					booleanLogic2 = null;
			}
		}
		msd2i.terminate();
		msd1i.terminate();
	}	finally 
	{
		if( ((msd2i != null)) )
		{
				msd2.freeInstance(msd2i);
				msd2i = null;
		}
		if( ((msd1i != null)) )
		{
				msd1.freeInstance(msd1i);
				msd1i = null;
		}
		if( ((msd1 != null)) )
		{
				unload(msd1);
				msd1 = null;
		}
		if( ((msd2 != null)) )
		{
				unload(msd2);
				msd2 = null;
		}
		if( ((math != null)) )
		{
				unload(math);
				math = null;
		}
		if( ((logger != null)) )
		{
				unload(logger);
				logger = null;
		}
		if( ((dataWriter != null)) )
		{
				unload(dataWriter);
				dataWriter = null;
		}
		if( ((booleanLogic != null)) )
		{
				unload(booleanLogic);
				booleanLogic = null;
		}
	}
}